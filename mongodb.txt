show dbs
use mydb
db.stats()
db => shows the db name
show collections
db.createCollection('product')
db.product.drop()
db.product.renameCollection('product')


db.product.insert({title:"p23", price:500, description: "test p1",category:"electronic",manufacturer:"menu1"})
db.product.insertMany([{title:"p16", price:600, description: "test p16"},
                       {title:"p17", price:700, description: "test p17"},
                       {title:"p18", price:800, description: "test p18"},
                       {title:"p19", price:900, description: "test p19"},
                       {title:"p20", price:1000, description: "test p20"},
                       {title:"p21", price:1100, description: "test p21"},
                       {title:"p22", price:1200, description: "test p22"},
                       
])
db.product.find().pretty()

db.product.find()
db.product.find().count()
db.product.find().hasNext()
db.product.find().next()
db.product.find().limit(3)
db.product.find().skip().limit(3)
db.product.find().skip(3*1).limit(3)
db.product.find().limit(3).pretty()

db.product.find({title:"p7"})
db.product.find({price:{$gt:600}})
db.product.find({},{title:1})
db.product.find({},{title:1, price:1})
db.product.find({},{description:0})
db.product.find({},{title:1,_id:0})
db.product.update({_id:ObjectId("61d99ef54714fb1bdd5f3f54")},{title:'product 1 updated', price:1000, description:"test product"})
db.product.find({_id:ObjectId("61d99ef54714fb1bdd5f3f54")})
db.product.update({_id:ObjectId("61d99ef54714fb1bdd5f3f54")},{$set: {price:1}})
db.product.updateMany({price:700},{$set: {price:1}})
db.product.remove({"_id":ObjectId("61d998cf84d81d7d7b7ad783")})
db.product.deleteMany({price:800})

--------------------------------------------------------
Udemy mongo
[
  {
    "departureAirport": "MUC",
    "arrivalAirport": "SFO",
    "aircraft": "Airbus A380",
    "distance": 12000,
    "intercontinental": true
  },
  {
    "departureAirport": "LHR",
    "arrivalAirport": "TXL",
    "aircraft": "Airbus A320",
    "distance": 950,
    "intercontinental": false
  }
]
-------------------------------
> db.flightData.insertOne({
...     "departureAirport": "MUC",
...     "arrivalAirport": "SFO",
...     "aircraft": "Airbus A380",
...     "distance": 12000,
...     "intercontinental": true
...   })
{
        "acknowledged" : true,
        "insertedId" : ObjectId("64396ee082b9bbf5dab07526")
}
-----------------------------------
mongo db convert json data into BSON for storing
------------------------------------
db.flightData.deleteOne({departureAirport : "MUC"})

 db.flightData.updateOne({distance:12000},{$set:{marker: "delete"}})

 db.flightData.updateMany({},{$set:{marker: "toDelete"}})

 db.flightData.deleteMany({marker: "toDelete"})

  db.flightData.find({distance:{$gt:900}}).pretty()

db.flightData.findOne({distance:{$gt:900}}) findOne will return only one row which mathe the criteria

db.flightData.update({_id: ObjectId("643976afe3876f6c47949442")},{$set:{delayed:true}})

db.flightData.update({_id: ObjectId("643976afe3876f6c47949442")},{delayed:true})
this query will overwrite existing data

db.flightData.replaceOne({_id: ObjectId("643976afe3876f6c47949442")},{
...     "departureAirport": "MUC",
...     "arrivalAirport": "SFO",
...     "aircraft": "Airbus A380",
...     "distance": 12000,
...     "intercontinental": true
...   })

db.passangers.find().pretty()
[
  {
        "_id" : ObjectId("643993f97fa3518c9835af92"),
        "name" : "Max Schwarzmueller",
        "age" : 29
}
{
        "_id" : ObjectId("643993f97fa3518c9835af93"),
        "name" : "Manu Lorenz",
        "age" : 30
}
{
        "_id" : ObjectId("643993f97fa3518c9835af94"),
        "name" : "Chris Hayton",
        "age" : 35
}
{
        "_id" : ObjectId("643993f97fa3518c9835af95"),
        "name" : "Sandeep Kumar",
        "age" : 28
}
{
        "_id" : ObjectId("643993f97fa3518c9835af96"),
        "name" : "Maria Jones",
        "age" : 30
}
{
        "_id" : ObjectId("643993f97fa3518c9835af97"),
        "name" : "Alexandra Maier",
        "age" : 27
}
{
        "_id" : ObjectId("643993f97fa3518c9835af98"),
        "name" : "Dr. Phil Evans",
        "age" : 47
}
{
        "_id" : ObjectId("643993f97fa3518c9835af99"),
        "name" : "Sandra Brugge",
        "age" : 33
}
{
        "_id" : ObjectId("643993f97fa3518c9835af9a"),
        "name" : "Elisabeth Mayr",
        "age" : 29
}
{
        "_id" : ObjectId("643993f97fa3518c9835af9b"),
        "name" : "Frank Cube",
        "age" : 41
}
{
        "_id" : ObjectId("643993f97fa3518c9835af9c"),
        "name" : "Karandeep Alun",
        "age" : 48
}
{
        "_id" : ObjectId("643993f97fa3518c9835af9d"),
        "name" : "Michaela Drayer",
        "age" : 39
}
{
        "_id" : ObjectId("643993f97fa3518c9835af9e"),
        "name" : "Bernd Hoftstadt",
        "age" : 22
}
{
        "_id" : ObjectId("643993f97fa3518c9835af9f"),
        "name" : "Scott Tolib",
        "age" : 44
}
{
        "_id" : ObjectId("643993f97fa3518c9835afa0"),
        "name" : "Freddy Melver",
        "age" : 41
}
{
        "_id" : ObjectId("643993f97fa3518c9835afa1"),
        "name" : "Alexis Bohed",
        "age" : 35
}
{
        "_id" : ObjectId("643993f97fa3518c9835afa2"),
        "name" : "Melanie Palace",
        "age" : 27
}
{
        "_id" : ObjectId("643993f97fa3518c9835afa3"),
        "name" : "Armin Glutch",
        "age" : 35
}
{
        "_id" : ObjectId("643993f97fa3518c9835afa4"),
        "name" : "Klaus Arber",
        "age" : 53
}
{
        "_id" : ObjectId("643993f97fa3518c9835afa5"),
        "name" : "Albert Twostone",
        "age" : 68
}
]

db.passangers.find().pretty().toArray() feches all the record

db.passangers.find().forEach((p)=>{printjson(p)})

pretty() only exists in cusror

db.passangers.find({},{name:1,_id:0}).pretty()

-----------------------------------------------
embdded or nested document

db.flightData.updateMany({},{$set:{status:{description:"on-time",lastUpdate:"1 hour ago",details:{responsible:"akash patel"}}}})

db.passangers.findOne({name:"Albert Twostone"}).hobbies

db.passangers.find({hobbies:"sports"}).pretty() //for array

db.flightData.find({"status.description":"on-time"}).pretty()//for object

------------------------------------------------
1.Data Types
2.Text "text"
3.Boolean true
4.Number 
1.Integer (int32) 55
2.NumberLong (int64) 100000000
3.NumberDecimal 12.99
5.ObjectId ObjectId("sfasd")
6.Date
1.ISO Date("2018-09-09")
2.Timestamp (11421532)
7.embdded document {"a":{...}}
8.Array {"b":[...]}
---------------------------
db.companies.insertOne({name:"Fresh Apples", isStartup: true, employees: 33, funding:123456789,details:{ceo:"Mark Super"},tags:[{title:"perfect"},{}],foundingDate:new Date(),insertedAt: new Timestamp()})
----------------------------
db.numbers.insertOne({a:NumberInt(1)})
NumberInt(1) this reduces dataSize
------------------------------ 
CREATE
db.insertMany([{name:akash,age:31},{name:"chrish",age:25}])
----------------------------
operator query projection
db.movies.find({"rating.average":{$gt:7}}).pretty()
db.movies.find({genres:"Drama"}).pretty()
db.movies.find({genres:[Drama]}).pretty()
//shows only darama array
db.movies.find({runtime:{$in:[30,42]}}).pretty()
db.movies.find({"rating.average":{$lt:5}}).pretty()
db.movies.find({"rating.average":{$lt:5}}).count()
db.movies.find({$or:[{"rating.average":{$lt:5}},{"rating.average":{$gt:9.3}}]}).count()
db.movies.find({$nor:[{"rating.average":{$lt:5}},{"rating.average":{$gt:9.3}}]}).count()
db.movies.find({$and:[{"rating.average":{$gt:9}},{genres:"Drama"}]}).count()
db.movies.find({runtime:{$not:{$eq:60}}}).count()
left some operator
------------------------------------
Curosr 
const dataCursor = db.movies.find()
 dataCursor.next()//only one doc
 dataCursor.forEach((doc)=>{printjson(doc)})//all doc
 ----------------------------------
 sorting
 db.movies.find().sort({"rating.average":-1,rubtime:-1}).pretty()
 ---------------------------------
 Skipping & limiting
db.movies.find().sort({"rating.average":-1,rubtime:-1}).skip(10).limit(10).pretty()
------------------------------------
projection to shape our data
db.movies.find({},{name:1,genres:1,runtime:1,rating:1}).pretty()
db.movies.find({},{name:1,genres:1,runtime:1,rating:1,_id:0}).pretty()
db.movies.find({},{name:1,genres:1,runtime:1,rating:1,_id:0}).pretty()
-----------------------------------
Update operation
db.users.updateOne({_id: ObjectId("643b948cedfd41030fa5ef15")},{$set:{hobbies:[{title:"sports",frequency:5},{title:"Cooking",frequency:1}]}})